#Tenseflow tutorials

#tensor - any array object
#Definitions
import tensorflow as tf
#Import required libraries

x1 = tf.constant(5)
x2 = tf.constant(6)

result = tf.multiply(x1,x2)
print(result)

Sess = tf.Session()#create a session variable#Start a session - computation happens only once a session is run
#                  else only a model(in this case a simple *ion is created)
#                  The session is run via an optimizer 

print(Sess.run(result))
#Sess.close()

with tf.Session() as sess:
	print(sess.run(result))
#45. TensorFlow Basics - Deep Learning with Neural Networks p. 2

import tensorflow as tf
from tensorflow.examples.tutorials.mnist import input_data
'''
input > weight > hidden layer 1 (activation function) > weights >
hidden layer 2 (activation function) > weights > output layer

compare output to intended output > cost function (cross entropy)

optimization function (optimizer) > minimize cost (AdamOptimizer...GCD, AdaGrad)

backpropogation

feed forward + backprop = epoch
'''#Epoch flow

mnist = input_data.read_data_sets("tmp/data/", one_hot = True)

n_nodes_hl1 = 500
n_nodes_hl2 = 500
n_nodes_hl3 = 500

n_classes = 10#Values that the dependent variable can assume
batch_size = 100#Number of records/images to be fed at single time

x = tf.placeholder('float',[None,784])#dimeonsions of feature vector
y = tf.placeholder('float')

def neural_network_model(data):
	hidden_1_layer = {'weights':tf.Variable(tf.random_normal([784,n_nodes_hl1])),
					  'biases':tf.Variable(tf.random_normal([n_nodes_hl1]))}
	#For loop for a variable number of hidden layers
	hidden_2_layer = {'weights':tf.Variable(tf.random_normal([n_nodes_hl1,n_nodes_hl2])),
					  'biases':tf.Variable(tf.random_normal([n_nodes_hl2]))}
	hidden_3_layer = {'weights':tf.Variable(tf.random_normal([n_nodes_hl1,n_nodes_hl3])),
					  'biases':tf.Variable(tf.random_normal([n_nodes_hl3]))}
	output_layer = {'weights':tf.Variable(tf.random_normal([n_nodes_hl3,n_classes])),
					  'biases':tf.Variable(tf.random_normal([n_classes]))}

	#input data * weights + bias

	l1  = tf.add(tf.matmul(data, hidden_1_layer['weights']), hidden_1_layer['biases'])
	l1  = tf.nn.relu(l1)#rectified linear activation function

	l2  = tf.add(tf.matmul(l1, hidden_2_layer['weights']), hidden_2_layer['biases'])
	l2  = tf.nn.relu(l2)

	l3  = tf.add(tf.matmul(l2, hidden_3_layer['weights']), hidden_2_layer['biases'])
	l3  = tf.nn.relu(l3)

	output  = tf.matmul(l3, output_layer['weights']) + output_layer['biases']

	return output
#Neural Network Model - Deep Learning with Neural Networks and TensorFlow

def train_neural_network(x):
	prediction = neural_network_model(x)
	cost = tf.reduce_mean( tf.nn.softmax_cross_entropy_with_logits(logits = prediction,labels = y) )
	optimizer = tf.train.AdamOptimizer().minimize(cost)
	hm_epochs = 10

	with tf.Session() as sess:
		sess.run(tf.initialize_all_variables())
		for epoch in range(hm_epochs):
			epoch_loss = 0
			for _ in range(int(mnist.train.num_examples/batch_size)):
				epoch_x,epoch_y = mnist.train.next_batch(batch_size)
				_, c = sess.run([optimizer, cost], feed_dict = {x: epoch_x, y: epoch_y})
				epoch_loss += c
			print('Epoch', epoch, 'completed out of ', hm_epochs, 'loss: ', epoch_loss)
		
		correct = tf.equal(tf.argmax(prediction, 1), tf.argmax(y,1))
		accuracy = tf.reduce_mean(tf.cast(correct, 'float'))
		print('Accuracy:', accuracy.eval({x:mnist.test.images, y:mnist.test.labels}))

train_neural_network(x)
# Epoch 0 completed out of  10 loss:  2107843.47298
# Epoch 1 completed out of  10 loss:  428296.1844
# Epoch 2 completed out of  10 loss:  233986.751068
# Epoch 3 completed out of  10 loss:  137828.551342
# Epoch 4 completed out of  10 loss:  85649.967306
# Epoch 5 completed out of  10 loss:  53223.7899209
# Epoch 6 completed out of  10 loss:  32527.2550166
# Epoch 7 completed out of  10 loss:  26922.0137492
# Epoch 8 completed out of  10 loss:  23286.3438365
# Epoch 9 completed out of  10 loss:  22729.7708968
# Accuracy: 0.9474
#Output# 47. Running our Network - Deep Learning with Neural Networks and TensorFlow

#Processing our own Data - Deep Learning with Neural Networks and TensorFlow part 5
#Lexicon - The input for sentiment analysis is usually a array of strings and need to 
#		   be converted to an array of numbers for using in tensorflow.
#		   For this purpose a lexicon array is created from the train data 
#          that contains the list of unique words present in the dataset
#          A new input is created by one hot encoding it as per the content in comparison with lexicon
#          lexicon = [chair, table, earth, life]
#          input   = I pulled chair to the table = [1 1 0 0]

#Definitions

#Processing our own Data - Deep Learning with Neural Networks and TensorFlow part 5
